plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'com.palantir.docker' version '0.24.0'
    id 'com.google.cloud.tools.jib' version '2.0.0'
}

ext {
    mapstruct = '1.3.1.Final'
    springfox = '2.9.2'
    validation = '2.0.1.Final'
    hibernateValidator = '6.1.2.Final';
}

group = 'com.example'
version = '1.0.1'
sourceCompatibility = '12'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation "io.springfox:springfox-swagger2:${springfox}"
    implementation "io.springfox:springfox-swagger-ui:${springfox}"
    compile "javax.validation:validation-api:${validation}"
    compile "org.hibernate.validator:hibernate-validator:${hibernateValidator}"


}

test {
    useJUnitPlatform()
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${project.group}/${project.name}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

jib {
    container.creationTime="USE_CURRENT_TIMESTAMP"
    from {
        image = "adoptopenjdk/openjdk12:alpine-jre"
    }

    to {
        image = "com.example/cinema"
        tags = [getCheckedOutGitCommitHash().toString(), "latest"]
    }
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify HEAD'.execute().text.trim()
}
